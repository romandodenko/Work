.politick {
  padding-top: 150px;
  padding-bottom: calc(50px + 50 * ((100vw - 320px) / 1600));
}
@media (max-width: 1024px) {
  .politick {
    padding-top: calc(70px + 80 * ((100vw - 320px) / 1600));
  }
}
.politick h1 {
  font-family: "Lalezar";
  font-style: normal;
  font-weight: 400;
  line-height: 1;
  text-transform: uppercase;
  color: #EDAA39;
  margin-bottom: 30px;
}
@media (max-width: 767px) {
  .politick h1 {
    font-size: calc(32px + 40.8 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .politick h1 {
    font-size: calc(32px + 24 * (100vw / 1920));
  }
}
.politick h2 {
  font-family: "Lalezar";
  font-style: normal;
  font-weight: 400;
  line-height: 1;
  text-transform: uppercase;
  color: #EDAA39;
  margin-bottom: 30px;
}
@media (max-width: 767px) {
  .politick h2 {
    font-size: calc(22px + 34 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .politick h2 {
    font-size: calc(22px + 20 * (100vw / 1920));
  }
}
.politick p {
  font-style: normal;
  font-weight: 400;
  line-height: calc(23px + 4 * ((100vw - 320px) / 1600));
  color: var(--white);
}
@media (max-width: 767px) {
  .politick p {
    font-size: calc(16px + 6.8 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .politick p {
    font-size: calc(16px + 4 * (100vw / 1920));
  }
}
.politick p:not(:last-child) {
  margin-bottom: 30px;
}
.politick ul:not(:last-child) {
  margin-bottom: 30px;
}
.politick li {
  font-style: normal;
  font-weight: 400;
  line-height: calc(21px + 2 * ((100vw - 320px) / 1600));
  color: var(--white);
}
@media (max-width: 767px) {
  .politick li {
    font-size: calc(14px + 3.4 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .politick li {
    font-size: calc(14px + 2 * (100vw / 1920));
  }
}
.politick li:not(:last-child) {
  margin-bottom: 30px;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcG9saXRpY2suc2NzcyIsImNvbXBvbmVudHMvcG9saXRpY2suY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJDQTtFQUNFLGtCQUFBO0VBbEJFLDBEQUFBO0FDdkJKO0FEMkNFO0VBSEY7SUFqQkksdURBQUE7RUNuQkY7QUFDRjtBRHlDRTtFQUNFLHNCQUFBO0VBQ0Esa0JBQUE7RUFDQSxnQkFBQTtFQUVBLGNBQUE7RUFDQSx5QkFBQTtFQUNBLGNBQUE7RUFDQSxtQkFBQTtBQ3hDSjtBRGlCRTtFQWVBO0lBZEUsdURBQUE7RUNkRjtBQUNGO0FEZ0JFO0VBV0E7SUFWRSwyQ0FBQTtFQ2JGO0FBQ0Y7QURpQ0U7RUFDRSxzQkFBQTtFQUNBLGtCQUFBO0VBQ0EsZ0JBQUE7RUFFQSxjQUFBO0VBQ0EseUJBQUE7RUFDQSxjQUFBO0VBQ0EsbUJBQUE7QUNoQ0o7QURGRTtFQTBCQTtJQXpCRSxxREFBQTtFQ0tGO0FBQ0Y7QURIRTtFQXNCQTtJQXJCRSwyQ0FBQTtFQ01GO0FBQ0Y7QUR5QkU7RUFDRSxrQkFBQTtFQUNBLGdCQUFBO0VBL0NBLHNEQUFBO0VBa0RBLG1CQUFBO0FDeEJKO0FEbEJFO0VBcUNBO0lBcENFLHNEQUFBO0VDcUJGO0FBQ0Y7QURuQkU7RUFpQ0E7SUFoQ0UsMENBQUE7RUNzQkY7QUFDRjtBRGdCSTtFQUNFLG1CQUFBO0FDZE47QURtQkk7RUFDRSxtQkFBQTtBQ2pCTjtBRHFCRTtFQUNFLGtCQUFBO0VBQ0EsZ0JBQUE7RUFqRUEsc0RBQUE7RUFvRUEsbUJBQUE7QUNwQko7QUR4Q0U7RUF1REE7SUF0REUsc0RBQUE7RUMyQ0Y7QUFDRjtBRHpDRTtFQW1EQTtJQWxERSwwQ0FBQTtFQzRDRjtBQUNGO0FEWUk7RUFDRSxtQkFBQTtBQ1ZOIiwiZmlsZSI6ImNvbXBvbmVudHMvcG9saXRpY2suY3NzIiwic291cmNlc0NvbnRlbnQiOlsiJG1heFdpZHRoOiAxOTIwO1xyXG4kbWF4V2lkdGhDb250YWluZXI6IDE0NDA7XHJcblxyXG5AbWl4aW4gYWRhcHRpdmUgKCRwcm9wZXJ0eSwgJHN0YXJ0U2l6ZSwgJG1pblNpemUsICR0eXBlKSB7XHJcbiAgJGFkZFNpemU6ICRzdGFydFNpemUgLSAkbWluU2l6ZTtcclxuXHJcbiAgQGlmICR0eXBlPT0xIHtcclxuICAgIC8vINCi0L7Qu9GM0LrQviDQtdGB0LvQuCDQvNC10L3RjNGI0LUg0LrQvtC90YLQtdC50L3QtdGA0LBcclxuICAgICN7JHByb3BlcnR5fTogJHN0YXJ0U2l6ZSArIHB4O1xyXG5cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAjeyRtYXhXaWR0aENvbnRhaW5lciArIHB4fSkge1xyXG4gICAgICAjeyRwcm9wZXJ0eX06IGNhbGMoI3skbWluU2l6ZSArIHB4fSArICN7JGFkZFNpemV9ICogKCgxMDB2dyAtIDMyMHB4KSAvICN7JG1heFdpZHRoQ29udGFpbmVyIC0gMzIwfSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGVsc2UgaWYgJHR5cGU9PTIge1xyXG4gICAgLy8g0KLQvtC70YzQutC+INC10YHQu9C4INCx0L7Qu9GM0YjQtSDQutC+0L3RgtC10LnQvdC10YDQsCBcclxuICAgICN7JHByb3BlcnR5fTogJHN0YXJ0U2l6ZSArIHB4O1xyXG5cclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAjeyRtYXhXaWR0aENvbnRhaW5lciArIHB4fSkge1xyXG4gICAgICAjeyRwcm9wZXJ0eX06IGNhbGMoI3skbWluU2l6ZSArIHB4fSArICN7JGFkZFNpemV9ICogKCgxMDB2dyAtIDMyMHB4KSAvICN7JG1heFdpZHRoIC0gMzIwfSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGVsc2Uge1xyXG4gICAgLy8g0JLRgdC10LPQtNCwXHJcbiAgICAjeyRwcm9wZXJ0eX06IGNhbGMoI3skbWluU2l6ZSArIHB4fSArICN7JGFkZFNpemV9ICogKCgxMDB2dyAtIDMyMHB4KSAvICN7JG1heFdpZHRoIC0gMzIwfSkpO1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIGFkYXB0aXYtZm9udCgkcGNTaXplLCAkbW9iU2l6ZSkge1xyXG4gICRhZGRTaXplOiAkcGNTaXplIC0gJG1vYlNpemU7XHJcbiAgJGFkZE1vYlNpemU6ICRhZGRTaXplICsgJGFkZFNpemUgKiAwLjc7XHJcblxyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xyXG4gICAgZm9udC1zaXplOiBjYWxjKCN7JG1vYlNpemUgKyBweH0gKyAjeyRhZGRNb2JTaXplfSAqICgoMTAwdncgLSAzMjBweCkgLyAjeyRtYXhXaWR0aH0pKTtcclxuICB9XHJcblxyXG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjdweCkge1xyXG4gICAgZm9udC1zaXplOiBjYWxjKCN7JG1vYlNpemUgKyBweH0gKyAjeyRhZGRTaXplfSAqICgxMDB2dyAvICN7JG1heFdpZHRofSkpO1xyXG4gIH1cclxufVxyXG5cclxuLnBvbGl0aWNrIHtcclxuICBwYWRkaW5nLXRvcDogMTUwcHg7XHJcbiAgQGluY2x1ZGUgYWRhcHRpdmUgKFwicGFkZGluZy1ib3R0b21cIiwgMTAwLCA1MCwgMCk7XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgQGluY2x1ZGUgYWRhcHRpdmUgKFwicGFkZGluZy10b3BcIiwgMTUwLCA3MCwgMCk7XHJcbiAgfVxyXG4gICYgaDEge1xyXG4gICAgZm9udC1mYW1pbHk6ICdMYWxlemFyJztcclxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICBAaW5jbHVkZSBhZGFwdGl2LWZvbnQoNTYsIDMyKTtcclxuICAgIGxpbmUtaGVpZ2h0OiAxO1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIGNvbG9yOiAjRURBQTM5O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICB9XHJcblxyXG4gICYgaDIge1xyXG4gICAgZm9udC1mYW1pbHk6ICdMYWxlemFyJztcclxuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICBAaW5jbHVkZSBhZGFwdGl2LWZvbnQoNDIsIDIyKTtcclxuICAgIGxpbmUtaGVpZ2h0OiAxO1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIGNvbG9yOiAjRURBQTM5O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICB9XHJcblxyXG4gIHAge1xyXG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgIEBpbmNsdWRlIGFkYXB0aXYtZm9udCgyMCwgMTYpO1xyXG4gICAgQGluY2x1ZGUgYWRhcHRpdmUgKFwibGluZS1oZWlnaHRcIiwgMjcsIDIzLCAwKTtcclxuICAgIGNvbG9yOiB2YXIoLS13aGl0ZSk7XHJcblxyXG4gICAgJjpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMzBweDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVsIHtcclxuICAgICY6bm90KDpsYXN0LWNoaWxkKSB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsaSB7XHJcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgQGluY2x1ZGUgYWRhcHRpdi1mb250KDE2LCAxNCk7XHJcbiAgICBAaW5jbHVkZSBhZGFwdGl2ZSAoXCJsaW5lLWhlaWdodFwiLCAyMywgMjEsIDApO1xyXG4gICAgY29sb3I6IHZhcigtLXdoaXRlKTtcclxuXHJcbiAgICAmOm5vdCg6bGFzdC1jaGlsZCkge1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG4gICAgfVxyXG4gIH1cclxufSIsIi5wb2xpdGljayB7XG4gIHBhZGRpbmctdG9wOiAxNTBweDtcbiAgcGFkZGluZy1ib3R0b206IGNhbGMoNTBweCArIDUwICogKCgxMDB2dyAtIDMyMHB4KSAvIDE2MDApKTtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcbiAgLnBvbGl0aWNrIHtcbiAgICBwYWRkaW5nLXRvcDogY2FsYyg3MHB4ICsgODAgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gMTYwMCkpO1xuICB9XG59XG4ucG9saXRpY2sgaDEge1xuICBmb250LWZhbWlseTogXCJMYWxlemFyXCI7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGNvbG9yOiAjRURBQTM5O1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC5wb2xpdGljayBoMSB7XG4gICAgZm9udC1zaXplOiBjYWxjKDMycHggKyA0MC44ICogKCgxMDB2dyAtIDMyMHB4KSAvIDE5MjApKTtcbiAgfVxufVxuQG1lZGlhIChtaW4td2lkdGg6IDc2N3B4KSB7XG4gIC5wb2xpdGljayBoMSB7XG4gICAgZm9udC1zaXplOiBjYWxjKDMycHggKyAyNCAqICgxMDB2dyAvIDE5MjApKTtcbiAgfVxufVxuLnBvbGl0aWNrIGgyIHtcbiAgZm9udC1mYW1pbHk6IFwiTGFsZXphclwiO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBjb2xvcjogI0VEQUEzOTtcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xuICAucG9saXRpY2sgaDIge1xuICAgIGZvbnQtc2l6ZTogY2FsYygyMnB4ICsgMzQgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gMTkyMCkpO1xuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNzY3cHgpIHtcbiAgLnBvbGl0aWNrIGgyIHtcbiAgICBmb250LXNpemU6IGNhbGMoMjJweCArIDIwICogKDEwMHZ3IC8gMTkyMCkpO1xuICB9XG59XG4ucG9saXRpY2sgcCB7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgbGluZS1oZWlnaHQ6IGNhbGMoMjNweCArIDQgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gMTYwMCkpO1xuICBjb2xvcjogdmFyKC0td2hpdGUpO1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC5wb2xpdGljayBwIHtcbiAgICBmb250LXNpemU6IGNhbGMoMTZweCArIDYuOCAqICgoMTAwdncgLSAzMjBweCkgLyAxOTIwKSk7XG4gIH1cbn1cbkBtZWRpYSAobWluLXdpZHRoOiA3NjdweCkge1xuICAucG9saXRpY2sgcCB7XG4gICAgZm9udC1zaXplOiBjYWxjKDE2cHggKyA0ICogKDEwMHZ3IC8gMTkyMCkpO1xuICB9XG59XG4ucG9saXRpY2sgcDpub3QoOmxhc3QtY2hpbGQpIHtcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn1cbi5wb2xpdGljayB1bDpub3QoOmxhc3QtY2hpbGQpIHtcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn1cbi5wb2xpdGljayBsaSB7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgbGluZS1oZWlnaHQ6IGNhbGMoMjFweCArIDIgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gMTYwMCkpO1xuICBjb2xvcjogdmFyKC0td2hpdGUpO1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC5wb2xpdGljayBsaSB7XG4gICAgZm9udC1zaXplOiBjYWxjKDE0cHggKyAzLjQgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gMTkyMCkpO1xuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNzY3cHgpIHtcbiAgLnBvbGl0aWNrIGxpIHtcbiAgICBmb250LXNpemU6IGNhbGMoMTRweCArIDIgKiAoMTAwdncgLyAxOTIwKSk7XG4gIH1cbn1cbi5wb2xpdGljayBsaTpub3QoOmxhc3QtY2hpbGQpIHtcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn0iXX0= */
