.politicks {
  margin: 50px 0;
}
.politicks h1 {
  font-weight: 700;
  line-height: 58px;
  color: #ffffff;
  margin-bottom: 30px;
  text-transform: uppercase;
  text-align: center;
}
@media (max-width: 767px) {
  .politicks h1 {
    font-size: calc(24px + 20.4 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .politicks h1 {
    font-size: calc(24px + 12 * (100vw / 1920));
  }
}
.politicks h2 {
  font-weight: 700;
  line-height: 46px;
  color: #ffffff;
  margin-bottom: 30px;
  text-transform: uppercase;
  text-align: center;
}
@media (max-width: 767px) {
  .politicks h2 {
    font-size: calc(20px + 17 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .politicks h2 {
    font-size: calc(20px + 10 * (100vw / 1920));
  }
}
.politicks p {
  font-weight: 400;
  line-height: 28px;
  color: #ffffff;
  margin-bottom: 30px;
}
@media (max-width: 767px) {
  .politicks p {
    font-size: calc(14px + 6.8 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .politicks p {
    font-size: calc(14px + 4 * (100vw / 1920));
  }
}
.politicks ul {
  margin-bottom: 30px;
}
.politicks li {
  font-weight: 400;
  line-height: 24px;
  color: #ffffff;
}
@media (max-width: 767px) {
  .politicks li {
    font-size: calc(14px + 3.4 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .politicks li {
    font-size: calc(14px + 2 * (100vw / 1920));
  }
}
.politicks li:not(:last-child) {
  margin-bottom: 20px;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcG9saXRpY2tzLnNjc3MiLCJjb21wb25lbnRzL3BvbGl0aWNrcy5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUNBO0VBQ0UsY0FBQTtBQ2xDRjtBRG1DRTtFQUVFLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxjQUFBO0VBQ0EsbUJBQUE7RUFDQSx5QkFBQTtFQUNBLGtCQUFBO0FDbENKO0FEZ0JFO0VBV0E7SUFWRSx1REFBQTtFQ2JGO0FBQ0Y7QURjRTtFQVFBO0lBUEUsMkNBQUE7RUNYRjtBQUNGO0FEMkJFO0VBRUUsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLGNBQUE7RUFDQSxtQkFBQTtFQUNBLHlCQUFBO0VBQ0Esa0JBQUE7QUMxQko7QURGRTtFQXFCQTtJQXBCRSxxREFBQTtFQ0tGO0FBQ0Y7QURKRTtFQWtCQTtJQWpCRSwyQ0FBQTtFQ09GO0FBQ0Y7QURtQkU7RUFFRSxnQkFBQTtFQUNBLGlCQUFBO0VBQ0EsY0FBQTtFQUNBLG1CQUFBO0FDbEJKO0FEbEJFO0VBK0JBO0lBOUJFLHNEQUFBO0VDcUJGO0FBQ0Y7QURwQkU7RUE0QkE7SUEzQkUsMENBQUE7RUN1QkY7QUFDRjtBRFdFO0VBQ0UsbUJBQUE7QUNUSjtBRFlFO0VBRUUsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLGNBQUE7QUNYSjtBRHBDRTtFQTJDQTtJQTFDRSxzREFBQTtFQ3VDRjtBQUNGO0FEdENFO0VBd0NBO0lBdkNFLDBDQUFBO0VDeUNGO0FBQ0Y7QURJRTtFQUNFLG1CQUFBO0FDRkoiLCJmaWxlIjoiY29tcG9uZW50cy9wb2xpdGlja3MuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiJG1heFdpZHRoOiAxOTIwO1xyXG4kbWF4V2lkdGhDb250YWluZXI6IDEzMjA7XHJcblxyXG5AbWl4aW4gYWRhcHRpdmUgKCRwcm9wZXJ0eSwgJHN0YXJ0U2l6ZSwgJG1pblNpemUsICR0eXBlKSB7XHJcbiAgJGFkZFNpemU6ICRzdGFydFNpemUgLSAkbWluU2l6ZTtcclxuICBAaWYgJHR5cGU9PTEge1xyXG4gICAgLy8g0KLQvtC70YzQutC+INC10YHQu9C4INC80LXQvdGM0YjQtSDQutC+0L3RgtC10LnQvdC10YDQsFxyXG4gICAgI3skcHJvcGVydHl9OiAkc3RhcnRTaXplICsgcHg7XHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogI3skbWF4V2lkdGhDb250YWluZXIgKyBweH0pIHtcclxuICAgICAgI3skcHJvcGVydHl9OiBjYWxjKCN7JG1pblNpemUgKyBweH0gKyAjeyRhZGRTaXplfSAqICgoMTAwdncgLSAzMjBweCkgLyAjeyRtYXhXaWR0aENvbnRhaW5lciAtIDMyMH0pKTtcclxuICAgIH1cclxuICB9IEBlbHNlIGlmICR0eXBlPT0yIHtcclxuICAgIC8vINCi0L7Qu9GM0LrQviDQtdGB0LvQuCDQsdC+0LvRjNGI0LUg0LrQvtC90YLQtdC50L3QtdGA0LAgXHJcbiAgICAjeyRwcm9wZXJ0eX06ICRzdGFydFNpemUgKyBweDtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAjeyRtYXhXaWR0aENvbnRhaW5lciArIHB4fSkge1xyXG4gICAgICAjeyRwcm9wZXJ0eX06IGNhbGMoI3skbWluU2l6ZSArIHB4fSArICN7JGFkZFNpemV9ICogKCgxMDB2dyAtIDMyMHB4KSAvICN7JG1heFdpZHRoIC0gMzIwfSkpO1xyXG4gICAgfVxyXG4gIH0gQGVsc2Uge1xyXG4gICAgLy8g0JLRgdC10LPQtNCwXHJcbiAgICAjeyRwcm9wZXJ0eX06IGNhbGMoI3skbWluU2l6ZSArIHB4fSArICN7JGFkZFNpemV9ICogKCgxMDB2dyAtIDMyMHB4KSAvICN7JG1heFdpZHRoIC0gMzIwfSkpO1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIGFkYXB0aXYtZm9udCgkcGNTaXplLCAkbW9iU2l6ZSkge1xyXG4gICRhZGRTaXplOiAkcGNTaXplIC0gJG1vYlNpemU7XHJcbiAgJGFkZE1vYlNpemU6ICRhZGRTaXplICsgJGFkZFNpemUgKiAwLjc7XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XHJcbiAgICBmb250LXNpemU6IGNhbGMoI3skbW9iU2l6ZSArIHB4fSArICN7JGFkZE1vYlNpemV9ICogKCgxMDB2dyAtIDMyMHB4KSAvICN7JG1heFdpZHRofSkpO1xyXG4gIH1cclxuICBAbWVkaWEgKG1pbi13aWR0aDogNzY3cHgpIHtcclxuICAgIGZvbnQtc2l6ZTogY2FsYygjeyRtb2JTaXplICsgcHh9ICsgI3skYWRkU2l6ZX0gKiAoMTAwdncgLyAjeyRtYXhXaWR0aH0pKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG4ucG9saXRpY2tzIHtcclxuICBtYXJnaW46IDUwcHggMDtcclxuICAmIGgxIHtcclxuICAgIEBpbmNsdWRlIGFkYXB0aXYtZm9udCgzNiwgMjQpO1xyXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiA1OHB4O1xyXG4gICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcblxyXG4gICYgaDIge1xyXG4gICAgQGluY2x1ZGUgYWRhcHRpdi1mb250KDMwLCAyMCk7XHJcbiAgICBmb250LXdlaWdodDogNzAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDQ2cHg7XHJcbiAgICBjb2xvcjogI2ZmZmZmZjtcclxuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuXHJcbiAgJiBwIHtcclxuICAgIEBpbmNsdWRlIGFkYXB0aXYtZm9udCgxOCwgMTQpO1xyXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyOHB4O1xyXG4gICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xyXG4gIH1cclxuXHJcbiAgJiB1bCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4XHJcbiAgfVxyXG5cclxuICAmIGxpIHtcclxuICAgIEBpbmNsdWRlIGFkYXB0aXYtZm9udCgxNiwgMTQpO1xyXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAyNHB4O1xyXG4gICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgfVxyXG5cclxuICAmIGxpOm5vdCg6bGFzdC1jaGlsZCkge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICB9XHJcbn0iLCIucG9saXRpY2tzIHtcbiAgbWFyZ2luOiA1MHB4IDA7XG59XG4ucG9saXRpY2tzIGgxIHtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgbGluZS1oZWlnaHQ6IDU4cHg7XG4gIGNvbG9yOiAjZmZmZmZmO1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY3cHgpIHtcbiAgLnBvbGl0aWNrcyBoMSB7XG4gICAgZm9udC1zaXplOiBjYWxjKDI0cHggKyAyMC40ICogKCgxMDB2dyAtIDMyMHB4KSAvIDE5MjApKTtcbiAgfVxufVxuQG1lZGlhIChtaW4td2lkdGg6IDc2N3B4KSB7XG4gIC5wb2xpdGlja3MgaDEge1xuICAgIGZvbnQtc2l6ZTogY2FsYygyNHB4ICsgMTIgKiAoMTAwdncgLyAxOTIwKSk7XG4gIH1cbn1cbi5wb2xpdGlja3MgaDIge1xuICBmb250LXdlaWdodDogNzAwO1xuICBsaW5lLWhlaWdodDogNDZweDtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xuICAucG9saXRpY2tzIGgyIHtcbiAgICBmb250LXNpemU6IGNhbGMoMjBweCArIDE3ICogKCgxMDB2dyAtIDMyMHB4KSAvIDE5MjApKTtcbiAgfVxufVxuQG1lZGlhIChtaW4td2lkdGg6IDc2N3B4KSB7XG4gIC5wb2xpdGlja3MgaDIge1xuICAgIGZvbnQtc2l6ZTogY2FsYygyMHB4ICsgMTAgKiAoMTAwdncgLyAxOTIwKSk7XG4gIH1cbn1cbi5wb2xpdGlja3MgcCB7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGxpbmUtaGVpZ2h0OiAyOHB4O1xuICBjb2xvcjogI2ZmZmZmZjtcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xuICAucG9saXRpY2tzIHAge1xuICAgIGZvbnQtc2l6ZTogY2FsYygxNHB4ICsgNi44ICogKCgxMDB2dyAtIDMyMHB4KSAvIDE5MjApKTtcbiAgfVxufVxuQG1lZGlhIChtaW4td2lkdGg6IDc2N3B4KSB7XG4gIC5wb2xpdGlja3MgcCB7XG4gICAgZm9udC1zaXplOiBjYWxjKDE0cHggKyA0ICogKDEwMHZ3IC8gMTkyMCkpO1xuICB9XG59XG4ucG9saXRpY2tzIHVsIHtcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn1cbi5wb2xpdGlja3MgbGkge1xuICBmb250LXdlaWdodDogNDAwO1xuICBsaW5lLWhlaWdodDogMjRweDtcbiAgY29sb3I6ICNmZmZmZmY7XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY3cHgpIHtcbiAgLnBvbGl0aWNrcyBsaSB7XG4gICAgZm9udC1zaXplOiBjYWxjKDE0cHggKyAzLjQgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gMTkyMCkpO1xuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNzY3cHgpIHtcbiAgLnBvbGl0aWNrcyBsaSB7XG4gICAgZm9udC1zaXplOiBjYWxjKDE0cHggKyAyICogKDEwMHZ3IC8gMTkyMCkpO1xuICB9XG59XG4ucG9saXRpY2tzIGxpOm5vdCg6bGFzdC1jaGlsZCkge1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xufSJdfQ== */
