.header {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  padding: 10px 0;
}
@media (max-width: 768px) {
  .header {
    width: 98%;
  }
}
.header__nav {
  gap: 45px;
  padding: 0;
}
@media (max-width: 768px) {
  .header__offcanvas-header {
    margin-bottom: 120px;
  }
}
.header__nav-link {
  font-style: normal;
  font-weight: 400;
  font-size: 34px;
  line-height: calc(32px + 16 * ((100vw - 320px) / 1600));
  text-align: center;
  color: #000000;
  padding: 0;
  -webkit-transition: color 0.2s ease-in-out;
  -o-transition: color 0.2s ease-in-out;
  transition: color 0.2s ease-in-out;
}
@media (max-width: 767px) {
  .header__nav-link {
    font-size: calc(25px + 15.3 * ((100vw - 320px) / 1920));
  }
}
@media (min-width: 767px) {
  .header__nav-link {
    font-size: calc(25px + 9 * (100vw / 1920));
  }
}
@media (any-hover: hover) {
  .header__nav-link:hover {
    color: #EF8D55;
  }
}
.header__nav-link:active {
  color: #EF8D55;
}
.header__logo img {
  max-width: 100%;
}

.header__close-btn:focus {
  border: 0;
  outline: 0;
  -webkit-box-shadow: none;
  box-shadow: none;
}

.navbar-toggler {
  padding: 0;
  width: 44px;
  height: 16px;
  border: 0;
}
.navbar-toggler span {
  display: block;
  width: 100%;
  height: 2px;
  background-color: rgba(164, 60, 0, 0.9);
}
.navbar-toggler span:not(:last-child) {
  margin-bottom: 4px;
}

.navbar-toggler:focus {
  outline: 0;
  -webkit-box-shadow: none !important;
  box-shadow: none !important;
}

.offcanvas {
  background-color: #EF8D55;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaGVhZGVyLnNjc3MiLCJjb21wb25lbnRzL2hlYWRlci5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0NBO0VBQ0Usa0JBQUE7RUFDQSxNQUFBO0VBQ0EsT0FBQTtFQUNBLFdBQUE7RUFDQSxlQUFBO0FDakNGO0FEa0NFO0VBTkY7SUFPSSxVQUFBO0VDL0JGO0FBQ0Y7QURvQ0U7RUFDRSxTQUFBO0VBQ0EsVUFBQTtBQ2xDSjtBRHlDSTtFQURGO0lBRUksb0JBQUE7RUN0Q0o7QUFDRjtBRGtERTtFQUNFLGtCQUFBO0VBQ0osZ0JBQUE7RUFDQSxlQUFBO0VBdERJLHVEQUFBO0VBeURKLGtCQUFBO0VBQ0EsY0FBQTtFQUNBLFVBQUE7RUFDQSwwQ0FBQTtFQUFBLHFDQUFBO0VBQUEsa0NBQUE7QUNqREE7QURKRTtFQTRDQTtJQTNDRSx1REFBQTtFQ09GO0FBQ0Y7QURORTtFQXlDQTtJQXhDRSwwQ0FBQTtFQ1NGO0FBQ0Y7QUR3Q0E7RUFDQTtJQUNFLGNBQUE7RUN0Q0E7QUFDRjtBRHdDQTtFQUNFLGNBQUE7QUN0Q0Y7QUQ4Q0k7RUFDRSxlQUFBO0FDNUNOOztBRGdEQTtFQUNFLFNBQUE7RUFDQSxVQUFBO0VBQ0Esd0JBQUE7RUFBQSxnQkFBQTtBQzdDRjs7QUQrQ0E7RUFDRSxVQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxTQUFBO0FDNUNGO0FENkNFO0VBQ0UsY0FBQTtFQUNBLFdBQUE7RUFDQSxXQUFBO0VBQ0EsdUNBQUE7QUMzQ0o7QUQ0Q0k7RUFDRSxrQkFBQTtBQzFDTjs7QUQ4Q0E7RUFDRSxVQUFBO0VBQ0EsbUNBQUE7RUFBQSwyQkFBQTtBQzNDRjs7QUQ2Q0E7RUFDRSx5QkFBQTtBQzFDRiIsImZpbGUiOiJjb21wb25lbnRzL2hlYWRlci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIkbWF4V2lkdGg6IDE5MjA7XHJcbiRtYXhXaWR0aENvbnRhaW5lcjogMTQ0MDtcclxuXHJcbkBtaXhpbiBhZGFwdGl2ZSAoJHByb3BlcnR5LCAkc3RhcnRTaXplLCAkbWluU2l6ZSwgJHR5cGUpIHtcclxuICAkYWRkU2l6ZTogJHN0YXJ0U2l6ZSAtICRtaW5TaXplO1xyXG4gIEBpZiAkdHlwZT09MSB7XHJcbiAgICAvLyDQotC+0LvRjNC60L4g0LXRgdC70Lgg0LzQtdC90YzRiNC1INC60L7QvdGC0LXQudC90LXRgNCwXHJcbiAgICAjeyRwcm9wZXJ0eX06ICRzdGFydFNpemUgKyBweDtcclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAjeyRtYXhXaWR0aENvbnRhaW5lciArIHB4fSkge1xyXG4gICAgICAjeyRwcm9wZXJ0eX06IGNhbGMoI3skbWluU2l6ZSArIHB4fSArICN7JGFkZFNpemV9ICogKCgxMDB2dyAtIDMyMHB4KSAvICN7JG1heFdpZHRoQ29udGFpbmVyIC0gMzIwfSkpO1xyXG4gICAgfVxyXG4gIH0gQGVsc2UgaWYgJHR5cGU9PTIge1xyXG4gICAgLy8g0KLQvtC70YzQutC+INC10YHQu9C4INCx0L7Qu9GM0YjQtSDQutC+0L3RgtC10LnQvdC10YDQsCBcclxuICAgICN7JHByb3BlcnR5fTogJHN0YXJ0U2l6ZSArIHB4O1xyXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICN7JG1heFdpZHRoQ29udGFpbmVyICsgcHh9KSB7XHJcbiAgICAgICN7JHByb3BlcnR5fTogY2FsYygjeyRtaW5TaXplICsgcHh9ICsgI3skYWRkU2l6ZX0gKiAoKDEwMHZ3IC0gMzIwcHgpIC8gI3skbWF4V2lkdGggLSAzMjB9KSk7XHJcbiAgICB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICAvLyDQktGB0LXQs9C00LBcclxuICAgICN7JHByb3BlcnR5fTogY2FsYygjeyRtaW5TaXplICsgcHh9ICsgI3skYWRkU2l6ZX0gKiAoKDEwMHZ3IC0gMzIwcHgpIC8gI3skbWF4V2lkdGggLSAzMjB9KSk7XHJcbiAgfVxyXG59XHJcblxyXG5AbWl4aW4gYWRhcHRpdi1mb250KCRwY1NpemUsICRtb2JTaXplKSB7XHJcbiAgJGFkZFNpemU6ICRwY1NpemUgLSAkbW9iU2l6ZTtcclxuICAkYWRkTW9iU2l6ZTogJGFkZFNpemUgKyAkYWRkU2l6ZSAqIDAuNztcclxuICBAbWVkaWEgKG1heC13aWR0aDogNzY3cHgpIHtcclxuICAgIGZvbnQtc2l6ZTogY2FsYygjeyRtb2JTaXplICsgcHh9ICsgI3skYWRkTW9iU2l6ZX0gKiAoKDEwMHZ3IC0gMzIwcHgpIC8gI3skbWF4V2lkdGh9KSk7XHJcbiAgfVxyXG4gIEBtZWRpYSAobWluLXdpZHRoOiA3NjdweCkge1xyXG4gICAgZm9udC1zaXplOiBjYWxjKCN7JG1vYlNpemUgKyBweH0gKyAjeyRhZGRTaXplfSAqICgxMDB2dyAvICN7JG1heFdpZHRofSkpO1xyXG4gIH1cclxufVxyXG5cclxuLmhlYWRlciB7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBhZGRpbmc6IDEwcHggMDtcclxuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA5OCU7XHJcbiAgfVxyXG5cclxuICAmX19jb250YWluZXIge1xyXG4gIH1cclxuXHJcbiAgJl9fbmF2IHtcclxuICAgIGdhcDogNDVweDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgfVxyXG5cclxuICAmX19vZmZjYW52YXMge1xyXG4gIH1cclxuXHJcbiAgJl9fb2ZmY2FudmFzLWhlYWRlciB7XHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMTIwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAmX19jbG9zZS1idG4ge1xyXG4gIH1cclxuXHJcbiAgJl9fb2ZmY2FudmFzLWJvZHkge1xyXG4gIH1cclxuXHJcbiAgJl9fbmF2LWl0ZW0ge1xyXG4gIH1cclxuXHJcbiAgJl9fbmF2LWxpbmsge1xyXG4gICAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG5mb250LXdlaWdodDogNDAwO1xyXG5mb250LXNpemU6IDM0cHg7XHJcbkBpbmNsdWRlIGFkYXB0aXYtZm9udCgzNCwgMjUpO1xyXG5AaW5jbHVkZSBhZGFwdGl2ZSAoXCJsaW5lLWhlaWdodFwiLCA0OCwgMzIsIDApO1xyXG50ZXh0LWFsaWduOiBjZW50ZXI7XHJcbmNvbG9yOiAjMDAwMDAwO1xyXG5wYWRkaW5nOiAwO1xyXG50cmFuc2l0aW9uOiBjb2xvciAuMnMgZWFzZS1pbi1vdXQ7XHJcbkBtZWRpYSAoYW55LWhvdmVyOiBob3Zlcikge1xyXG4mOmhvdmVyIHtcclxuICBjb2xvcjogI0VGOEQ1NTtcclxufVxyXG59XHJcbiY6YWN0aXZlIHtcclxuICBjb2xvcjogI0VGOEQ1NTtcclxufVxyXG4gIH1cclxuXHJcbiAgJl9fd3JhcHBlci1sb2dvIHtcclxuICB9XHJcblxyXG4gICZfX2xvZ28ge1xyXG4gICAgJiBpbWcge1xyXG4gICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbi5oZWFkZXJfX2Nsb3NlLWJ0bjpmb2N1cyB7XHJcbiAgYm9yZGVyOiAwO1xyXG4gIG91dGxpbmU6IDA7XHJcbiAgYm94LXNoYWRvdzogbm9uZTtcclxufVxyXG4ubmF2YmFyLXRvZ2dsZXIge1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgd2lkdGg6IDQ0cHg7XHJcbiAgaGVpZ2h0OiAxNnB4O1xyXG4gIGJvcmRlcjogMDtcclxuICAmIHNwYW4ge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMnB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNjQsIDYwLCAwLCAwLjkpO1xyXG4gICAgJjpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogNHB4O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4ubmF2YmFyLXRvZ2dsZXI6Zm9jdXMge1xyXG4gIG91dGxpbmU6IDA7XHJcbiAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xyXG59XHJcbi5vZmZjYW52YXMge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNFRjhENTU7XHJcbn0iLCIuaGVhZGVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAxMHB4IDA7XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLmhlYWRlciB7XG4gICAgd2lkdGg6IDk4JTtcbiAgfVxufVxuLmhlYWRlcl9fbmF2IHtcbiAgZ2FwOiA0NXB4O1xuICBwYWRkaW5nOiAwO1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gIC5oZWFkZXJfX29mZmNhbnZhcy1oZWFkZXIge1xuICAgIG1hcmdpbi1ib3R0b206IDEyMHB4O1xuICB9XG59XG4uaGVhZGVyX19uYXYtbGluayB7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgZm9udC1zaXplOiAzNHB4O1xuICBsaW5lLWhlaWdodDogY2FsYygzMnB4ICsgMTYgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gMTYwMCkpO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjMDAwMDAwO1xuICBwYWRkaW5nOiAwO1xuICB0cmFuc2l0aW9uOiBjb2xvciAwLjJzIGVhc2UtaW4tb3V0O1xufVxuQG1lZGlhIChtYXgtd2lkdGg6IDc2N3B4KSB7XG4gIC5oZWFkZXJfX25hdi1saW5rIHtcbiAgICBmb250LXNpemU6IGNhbGMoMjVweCArIDE1LjMgKiAoKDEwMHZ3IC0gMzIwcHgpIC8gMTkyMCkpO1xuICB9XG59XG5AbWVkaWEgKG1pbi13aWR0aDogNzY3cHgpIHtcbiAgLmhlYWRlcl9fbmF2LWxpbmsge1xuICAgIGZvbnQtc2l6ZTogY2FsYygyNXB4ICsgOSAqICgxMDB2dyAvIDE5MjApKTtcbiAgfVxufVxuQG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKSB7XG4gIC5oZWFkZXJfX25hdi1saW5rOmhvdmVyIHtcbiAgICBjb2xvcjogI0VGOEQ1NTtcbiAgfVxufVxuLmhlYWRlcl9fbmF2LWxpbms6YWN0aXZlIHtcbiAgY29sb3I6ICNFRjhENTU7XG59XG4uaGVhZGVyX19sb2dvIGltZyB7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cblxuLmhlYWRlcl9fY2xvc2UtYnRuOmZvY3VzIHtcbiAgYm9yZGVyOiAwO1xuICBvdXRsaW5lOiAwO1xuICBib3gtc2hhZG93OiBub25lO1xufVxuXG4ubmF2YmFyLXRvZ2dsZXIge1xuICBwYWRkaW5nOiAwO1xuICB3aWR0aDogNDRweDtcbiAgaGVpZ2h0OiAxNnB4O1xuICBib3JkZXI6IDA7XG59XG4ubmF2YmFyLXRvZ2dsZXIgc3BhbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAycHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTY0LCA2MCwgMCwgMC45KTtcbn1cbi5uYXZiYXItdG9nZ2xlciBzcGFuOm5vdCg6bGFzdC1jaGlsZCkge1xuICBtYXJnaW4tYm90dG9tOiA0cHg7XG59XG5cbi5uYXZiYXItdG9nZ2xlcjpmb2N1cyB7XG4gIG91dGxpbmU6IDA7XG4gIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcbn1cblxuLm9mZmNhbnZhcyB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNFRjhENTU7XG59Il19 */
